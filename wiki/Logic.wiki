#summary Theory of Operation for this Library.

= Introduction =

The ATmega328p has two different kinds of interrupts: “external”, and “pin change”.  There are only two external interrupt pins, INT0 and INT1, and they are mapped to Arduino pins 4 and 5.  These interrupts can be set to trigger on RISING or FALLING signal edges, or on low level.  On the other hand the pin change interrupts can be enabled on any or all of the Arduino's signal pins.  They are triggered equally on RISING or FALLING signal edges, so it is up to the interrupt code to determine what happened (did the signal rise, or fall?) and handle it properly.  Furthermore, the pin change interrupts are grouped into 3 “port”s on the MCU, so there are only 3 interrupt vectors (subroutines) for the entire body of 19 pins.  This makes the job of resolving the action on a single interrupt even more complicated.  The interrupt routine should be fast, but complication is the enemy of speed.

The PinChangeInt library is designed to handle the Arduino's pin change interrupts.  This is a description of how the ATmega328p Pin Change Interrupts work, and how the PinChangeInt library handles the situation.

= Details =
The Arduino's pins are shown below, in parentheses.  The corresponding pin numbers on the ATmega 328p are shown alongside the diagram of the 28-pin dip package:
{{{
                  +-\/-+
            PC6  1|    |28  PC5 (AI 5)
      (D 0) PD0  2|    |27  PC4 (AI 4)
      (D 1) PD1  3|    |26  PC3 (AI 3)
      (D 2) PD2  4|    |25  PC2 (AI 2)
 PWM+ (D 3) PD3  5|    |24  PC1 (AI 1)
      (D 4) PD4  6|    |23  PC0 (AI 0)
            VCC  7|    |22  GND
            GND  8|    |21  AREF
            PB6  9|    |20  AVCC
            PB7 10|    |19  PB5 (D 13)
 PWM+ (D 5) PD5 11|    |18  PB4 (D 12)
 PWM+ (D 6) PD6 12|    |17  PB3 (D 11) PWM
      (D 7) PD7 13|    |16  PB2 (D 10) PWM
      (D 8) PB0 14|    |15  PB1 (D 9) PWM
                  +----+
}}}
The ATmega 328p's pins' state can be sampled by simply reading a pin state register, which is a single 8-bit number.   The ATmega 328p's pins are grouped in sets of “Port”s, shown as “PDx”, “PBx”, “PCx” above, where x represents an integer from 0 to 8.  So you can see that Port B, pin 0 is pin 14 on the chip, or D8 on the Arduino board.