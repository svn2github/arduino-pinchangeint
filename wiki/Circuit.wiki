#summary How to wire a switch to your Arduino

= Introduction =

This library responds to pin change interrupts.  That is, pins you use will be set as inputs.  The ATmega processors in the Arduino come with resistors built in for you, that when turned on are connected to Vcc.  Thus, it is easiest to connect one pole of your switch to ground and the other to your Arduino pin.

= Details =
== Configure pin ==
This is generally how you will configure your digital pin on the Arduino, software-wise.  Pin 5 is shown as an example:
{{{
  pinMode(5, INPUT);
  digitalWrite(5, HIGH);
}}}
(remember that your Analog Input pins can also be Digital Input or Output pins).

The first statement turns your pin into a digital input pin.

The second statement turns on the Built-in resistor.  The resistor "pulls up" the voltage on the input pin.  This is because one end is connected to Vcc, and the other to the pin.  Under no load, then, the voltage on the input pin will read at Vcc; it has been pulled up to Vcc and hence this type of resistor is called a pull-up resistor.  The value of the ATmega328p's pull-up resistors are between 20-50k ohms.

By having a built-in pull-up resistor you reduce parts count on your project.  So it is easiest to connect a switch between ground and the pin.  

== Connecting ==
Here's a rough schematic, in ASCII (the `pole`s are the two connections on the switch):
{{{
  +---+ pole -- pole + --> Arduino Pin
 gnd
}}}

== Device Connected to Vcc ==
Here I show you how to connect an LED and have it turn on along with your switch:
=== Good ===
You should connect your LED to Vcc, and have a 150 to 390 ohm pull-up/current-limiting resistor in series with it, connected to the Arduino pin (assuming 5V Vcc).  Then connect your switch to ground and to the Arduino pin.  You turn on the Arduino pin's pull-up resistor as usual.  Here is how you would connect it: 
{{{
  +---+ pole -- pole + --------> Arduino Pin
  |                  |
  |                  +---+resistor+-----+ -LED+ +------->Vcc
 gnd
}}}

=== Bad ===
If for some reason you want to connect your switch to Vcc, you may want to wire it this way:
{{{
  +-+ resistor +----------> Arduino pin
  |            |
 gnd           +---+pole -- pole +--+ -LED+ +-------> Vcc   
}}}
The resistor will be 150-390 ohms.  Here, you would not turn on the Arduino's internal resistor.

The problem is, the forward voltage of the LED may be 2-4 volts.  Thus, the voltage at the Arduino pin will go from 0 (switch off) to 1-3 volts.  It is very well possible that the voltage will not be high enough to be recognized by the Arduino.  The ATmega328p spec sheet says that the minimum high voltage on a pin is (0.6 <pre>*</pre> Vcc), which at 5 volts would be 3 volts.  So you would need an LED with a low forward voltage drop. 

In short, it's easier to use a switch to pull the Arduino pin down to 0, than to pull it up to Vcc.


_to be continued_

*IGNORE ALL THIS*
== Caveats ==
Refer to the pin chart at http://www.arduino.cc/en/Hacking/PinMapping168.

The ATmega328 and its kind (ATmega168, ATmega2560) all use PORTs for their input and outputs.  A PORT is essentially a group of pins on the ATmega processor.  They are interesting because the pins grouped in each PORT share some things in common.  For example, you can read all the pins in a PORT in one command.  What this means for you as a designer is that you should NOT use two different PORTs for the two pins of your rotary encoder.

How do you know which pins are common with which PORTs?  Look at the pin mapping diagram as given in the link, above.  The pin names closest to the IC chip:  ie, PD0, PD1, PB6, etc., show you the PORTs.  B, C, and D are the three PORTs available on the ATmega168 and 328.  There are more PORTs on the ATmega2560 used in the Arduino Mega, but only those 3 PORTs allow for Pin Change interrupts on those bigger chips, too.

So, when you connect your rotary encoder to your Arduino, make sure that its two pins- which I call PinA and PinB- both attach to the same PORT.  This is a summary of the Arduino-to-port mappings that are available to you:
{{{
 Arduino Pins         PORT
 ------------         ----
 Digital 0-7          D
 Digital 8-13         B
 Analog  0-5          C
}}}

In summary, what you need to do... the ONLY thing you really need to do... is ensure that both pins of your encoder are attached to pins within those ranges, above.  Don't cross ranges and connect, for example, digital pin 7 to digital pin 10.  It won't work, and the addEncoder method will not configure your ports.